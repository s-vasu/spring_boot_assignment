package com.zemoso.author_monolithic.controller;

import com.zemoso.author_monolithic.dto.AuthorDTO;
import com.zemoso.author_monolithic.dto.BookDTO;
import com.zemoso.author_monolithic.service.AuthorServiceImpl;
import com.zemoso.author_monolithic.service.BookServiceImpl;
import jakarta.annotation.PostConstruct;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/authors")
public class AuthorController {

    private static final Logger logger = LoggerFactory.getLogger(AuthorController.class);

    private final AuthorServiceImpl authorServiceImpl;
    private final BookServiceImpl bookService;

    private static final String REDIRECT_AUTHORS = "redirect:/authors";

    public AuthorController(AuthorServiceImpl authorServiceImpl, BookServiceImpl bookService) {
        this.authorServiceImpl = authorServiceImpl;
        this.bookService = bookService;
    }

    @GetMapping
    public String listAuthors(Model model) {
        List<AuthorDTO> authors = authorServiceImpl.findAll();
        model.addAttribute("authors", authors);
        return "author-list";
    }

    @GetMapping("/create")
    public String createAuthorForm(Model model) {
        model.addAttribute("author", new AuthorDTO());
        return "author-create";
    }

    @PostMapping("/create")
    public String createAuthor(@ModelAttribute AuthorDTO authorDTO) {
        authorServiceImpl.save(authorDTO);
        return REDIRECT_AUTHORS;
    }

    @GetMapping("/edit/{id}")
    public String editAuthorForm(@PathVariable Long id, Model model) {
        AuthorDTO authorDTO = authorServiceImpl.findById(id);
        model.addAttribute("author", authorDTO);
        return "author-edit";
    }

    @PostMapping("/edit/{id}")
    public String editAuthor(@PathVariable Long id, @ModelAttribute AuthorDTO authorDTO) {
        authorDTO.setId(id);
        authorServiceImpl.save(authorDTO);
        return REDIRECT_AUTHORS;
    }

    @GetMapping("/delete/{id}")
    public String deleteAuthor(@PathVariable Long id) {
        authorServiceImpl.deleteById(id);
        return REDIRECT_AUTHORS;
    }

    @GetMapping("/{authorId}/books")
    public String getBooksByAuthor(@PathVariable Long authorId, Model model) {
        AuthorDTO authorDTO = authorServiceImpl.findById(authorId);
        List<BookDTO> books = bookService.getBooksByAuthorId(authorId);
        model.addAttribute("author", authorDTO);
        model.addAttribute("books", books);
        return "books";
    }

    @PostMapping("/{authorId}/addBook")
    public String addBook(@PathVariable Long authorId, @RequestParam String title) {
        BookDTO bookDTO = new BookDTO();
        bookDTO.setTitle(title);

        // Set the AuthorDTO ID for association
        AuthorDTO authorDTO = new AuthorDTO();
        authorDTO.setId(authorId);
        bookDTO.setAuthor(authorDTO);

        bookService.save(bookDTO);
        return "redirect:/authors/" + authorId + "/books";
    }

    @PostConstruct
    public void init() {
        logger.info("AuthorController initialized");
    }
}
