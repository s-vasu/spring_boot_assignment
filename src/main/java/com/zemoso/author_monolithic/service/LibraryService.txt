package com.zemoso.author_monolithic.service;

import com.zemoso.author_monolithic.dao.AuthorRepository;
import com.zemoso.author_monolithic.dao.BookRepository;
import com.zemoso.author_monolithic.entity.Author;
import com.zemoso.author_monolithic.entity.Book;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class LibraryService {

    private final AuthorRepository authorRepository;
    private final BookRepository bookRepository;

    @Autowired
    public LibraryService(AuthorRepository authorRepository, BookRepository bookRepository) {
        this.authorRepository = authorRepository;
        this.bookRepository = bookRepository;
    }

    public List<Author> getAllAuthors() {
        return authorRepository.findAll();
    }

    public Author getAuthorById(Long id) {
        return authorRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Author not found"));
    }

    public Author createAuthor(Author author) {
        return authorRepository.save(author);
    }

    public Author updateAuthor(Long id, Author author) {
        Author existingAuthor = getAuthorById(id);
        existingAuthor.setName(author.getName());
        return authorRepository.save(existingAuthor);
    }

    public void deleteAuthor(Long id) {
        authorRepository.deleteById(id);
    }

    public List<Book> getBooksByAuthor(Long authorId) {
        Author author = getAuthorById(authorId);
        return author.getBooks();
    }

    public Book addBookToAuthor(Long authorId, Book book) {
        Author author = getAuthorById(authorId);
        book.setAuthor(author);
        return bookRepository.save(book);
    }
}